[{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid.html","title":"pblasucci.Ananoid","content":"Alphabet \nCore \nKnownAlphabets \nNanoId \nAlphabet \nAlphabetError \nAlphabetException \nAlphabetExtensions \nNanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html","title":"Alphabet","content":"Alphabet \n\n Contains utilities for working with alphabets.\n \nAlphabet.ofLetters \nofLetters \nAlphabet.makeOrRaise \nmakeOrRaise \nAlphabet.makeNanoId \nmakeNanoId \nAlphabet.parseNanoId \nparseNanoId \nAlphabet.parseNonEmptyNanoId \nparseNonEmptyNanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#ofLetters","title":"Alphabet.ofLetters","content":"Alphabet.ofLetters \nofLetters \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#makeOrRaise","title":"Alphabet.makeOrRaise","content":"Alphabet.makeOrRaise \nmakeOrRaise \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#makeNanoId","title":"Alphabet.makeNanoId","content":"Alphabet.makeNanoId \nmakeNanoId \n\n Creates a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E instance\n of the given size whose letters are taken from the given alphabet.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#parseNanoId","title":"Alphabet.parseNanoId","content":"Alphabet.parseNanoId \nparseNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using a valid alphabet to guide validation.\n  \n\n If the given value is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists\n only of whitespace), parsing will succeed (ie: return \u003Ccode\u003ESome nanoId\u003C/code\u003E).\n However, the resulting \u003Ccode\u003ENanoId\u003C/code\u003E instance will be\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty\u0022\u003ENanoId.Empty\u003C/a\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#parseNonEmptyNanoId","title":"Alphabet.parseNonEmptyNanoId","content":"Alphabet.parseNonEmptyNanoId \nparseNonEmptyNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using a valid alphabet to guide validation.\n  \n\n Parsing will \u0022fail\u0022 (ie: return \u003Ccode\u003ENone\u003C/code\u003E) if the given value is empty\n (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists only of whitespace).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core.html","title":"Core","content":"Core \n\n Contains simple functions for generating \u0027nano identifier\u0027 strings\n (a simple alternative to things like \u0027Universal Unique Identifiers\u0027).\n  \nCore.Alphabets \nAlphabets \nCore.Defaults \nDefaults \nCore.Tagged \nTagged \nCore.nanoIdOf \nnanoIdOf \nCore.nanoId \nnanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core.html#nanoIdOf","title":"Core.nanoIdOf","content":"Core.nanoIdOf \nnanoIdOf \n\n Generates a new identifier, \u003Ccode\u003Esize\u003C/code\u003E characters in length,\n derived from the letters of the given alphabet\n (note: a size of less than one will result in an empty string).\n  \n\n When viewed from other languages, this function is named \u003Ccode\u003ENewNanoId\u003C/code\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core.html#nanoId","title":"Core.nanoId","content":"Core.nanoId \nnanoId \n\n Generates a new identifier with the default alphabet and size.\n  \n\n When viewed from other languages, this function is named \u003Ccode\u003ENewNanoId\u003C/code\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html","title":"Alphabets","content":"Alphabets \n\n Pre-defined alphabets commonly used to generate identifiers.\n \nAlphabets.Alphanumeric \nAlphanumeric \nAlphabets.HexadecimalLowercase \nHexadecimalLowercase \nAlphabets.HexadecimalUppercase \nHexadecimalUppercase \nAlphabets.Lowercase \nLowercase \nAlphabets.NoLookalikes \nNoLookalikes \nAlphabets.NoLookalikesSafe \nNoLookalikesSafe \nAlphabets.Numbers \nNumbers \nAlphabets.Uppercase \nUppercase \nAlphabets.UrlSafe \nUrlSafe"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Alphanumeric","title":"Alphabets.Alphanumeric","content":"Alphabets.Alphanumeric \nAlphanumeric \n\n from 0 to 9, not including any symbols or special characters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#HexadecimalLowercase","title":"Alphabets.HexadecimalLowercase","content":"Alphabets.HexadecimalLowercase \nHexadecimalLowercase \n\n Hexadecimal lowercase characters: 0123456789abcdef.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#HexadecimalUppercase","title":"Alphabets.HexadecimalUppercase","content":"Alphabets.HexadecimalUppercase \nHexadecimalUppercase \n\n Hexadecimal uppercase characters: 0123456789ABCDEF.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Lowercase","title":"Alphabets.Lowercase","content":"Alphabets.Lowercase \nLowercase \n\n Lowercase English letters: abcdefghijklmnopqrstuvwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#NoLookalikes","title":"Alphabets.NoLookalikes","content":"Alphabets.NoLookalikes \nNoLookalikes \n\n Numbers, Uppercase, and Lowercase without \u0022lookalikes\u0022:\n 1, l, I, 0, O, o, u, v, 5, S, s, 2, Z.\n Complete set: 346789ABCDEFGHJKLMNPQRTUVWXYabcdefghijkmnpqrtwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#NoLookalikesSafe","title":"Alphabets.NoLookalikesSafe","content":"Alphabets.NoLookalikesSafe \nNoLookalikesSafe \n\n Same as Nolookalikes -- but having removed vowels and: 3, 4, x, X, V.\n Complete set: 6789BCDFGHJKLMNPQRTWbcdfghjkmnpqrtwz\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Numbers","title":"Alphabets.Numbers","content":"Alphabets.Numbers \nNumbers \n\n Numbers from 0 to 9.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Uppercase","title":"Alphabets.Uppercase","content":"Alphabets.Uppercase \nUppercase \n\n Uppercase English letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#UrlSafe","title":"Alphabets.UrlSafe","content":"Alphabets.UrlSafe \nUrlSafe \n\n URL-friendly numbers, English letters, and symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E.\n This is the default alphabet if one is not explicitly specified.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-defaults.html","title":"Defaults","content":"Defaults \n\n Defines the recommended set of characters and output length\n for optimally generating nano identifier strings.\n \nDefaults.Alphabet \nAlphabet \nDefaults.Size \nSize"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-defaults.html#Alphabet","title":"Defaults.Alphabet","content":"Defaults.Alphabet \nAlphabet \n\n An alphabet consisting of: URL-friendly numbers, English letters, and\n symbols (ie: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E).\n This is the default alphabet if one is not explicitly specified.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-defaults.html#Size","title":"Defaults.Size","content":"Defaults.Size \nSize \n\n Twenty-one (21) single-byte characters.\n This is the default output length if one is not explicitly specified.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged.html","title":"Tagged","content":"Tagged \n\n Contains primitives for generating identifiers which are \u0022tagged\u0022\n with a discriminator (useful for managing lots of string which have\n different purposes, but where using a full CLR type is undesirable).\n  \n\u003Cb\u003EThis module is not intended for languages other than F#.\u003C/b\u003E \nTagged.nanoid \nnanoid \nTagged.string\u003C\u0027Tag\u003E \nstring\u003C\u0027Tag\u003E \nTagged.nanoIdOf\u0027 \nnanoIdOf\u0027 \nTagged.nanoId\u0027 \nnanoId\u0027"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged.html#nanoIdOf\u0027","title":"Tagged.nanoIdOf\u0027","content":"Tagged.nanoIdOf\u0027 \nnanoIdOf\u0027 \n\n Generates a new tagged identifier, \u003Ccode\u003Esize\u003C/code\u003E characters in length,\n derived from the letters of the given alphabet\n (note: a size of less than one will result in an empty string).\n  \n\u003Cb\u003EThis function is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged.html#nanoId\u0027","title":"Tagged.nanoId\u0027","content":"Tagged.nanoId\u0027 \nnanoId\u0027 \n\n Generates a new tagged identifier with the default alphabet and size.\n  \n\u003Cb\u003EThis function is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged-nanoid@measure\u0027.html","title":"nanoid","content":"nanoid \n\n A \u0022tag\u0022, which can be used as a discriminator.\n  \n\u003Cb\u003EThis tag is not intended for languages other than F#.\u003C/b\u003E \nnanoid.tag \ntag"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged-nanoid@measure\u0027.html#tag","title":"nanoid.tag","content":"nanoid.tag \ntag \n\n Applies the \u003Ccode\u003Enanoid\u003C/code\u003E \u0022tag\u0022 to a string.\n  \n\u003Cb\u003EThis function is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged-string@measurealias\u0027.html","title":"string\u003C\u0027Tag\u003E","content":"string\u003C\u0027Tag\u003E \n\n An abbreviation for the CLI type System.String.\n  \n\u003Cb\u003EThis alias is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html","title":"KnownAlphabets","content":"KnownAlphabets \n\n Pre-defined alphabets commonly used to generate identifiers.\n \nKnownAlphabets.Alphanumeric \nAlphanumeric \nKnownAlphabets.HexadecimalLowercase \nHexadecimalLowercase \nKnownAlphabets.HexadecimalUppercase \nHexadecimalUppercase \nKnownAlphabets.Lowercase \nLowercase \nKnownAlphabets.NoLookalikes \nNoLookalikes \nKnownAlphabets.NoLookalikesSafe \nNoLookalikesSafe \nKnownAlphabets.Numbers \nNumbers \nKnownAlphabets.Uppercase \nUppercase \nKnownAlphabets.UrlSafe \nUrlSafe"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Alphanumeric","title":"KnownAlphabets.Alphanumeric","content":"KnownAlphabets.Alphanumeric \nAlphanumeric \n\n Combination of all the lowercase, uppercase characters and numbers\n from 0 to 9, not including any symbols or special characters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#HexadecimalLowercase","title":"KnownAlphabets.HexadecimalLowercase","content":"KnownAlphabets.HexadecimalLowercase \nHexadecimalLowercase \n\n Hexadecimal lowercase characters: 0123456789abcdef.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#HexadecimalUppercase","title":"KnownAlphabets.HexadecimalUppercase","content":"KnownAlphabets.HexadecimalUppercase \nHexadecimalUppercase \n\n Hexadecimal uppercase characters: 0123456789ABCDEF.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Lowercase","title":"KnownAlphabets.Lowercase","content":"KnownAlphabets.Lowercase \nLowercase \n\n Lowercase English letters: abcdefghijklmnopqrstuvwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#NoLookalikes","title":"KnownAlphabets.NoLookalikes","content":"KnownAlphabets.NoLookalikes \nNoLookalikes \n\n Numbers, Uppercase, and Lowercase without \u0022lookalikes\u0022:\n 1, l, I, 0, O, o, u, v, 5, S, s, 2, Z.\n Complete set: 346789ABCDEFGHJKLMNPQRTUVWXYabcdefghijkmnpqrtwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#NoLookalikesSafe","title":"KnownAlphabets.NoLookalikesSafe","content":"KnownAlphabets.NoLookalikesSafe \nNoLookalikesSafe \n\n Same as Nolookalikes -- but having removed vowels and: 3, 4, x, X, V.\n Complete set: 6789BCDFGHJKLMNPQRTWbcdfghjkmnpqrtwz\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Numbers","title":"KnownAlphabets.Numbers","content":"KnownAlphabets.Numbers \nNumbers \n\n Numbers from 0 to 9.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Uppercase","title":"KnownAlphabets.Uppercase","content":"KnownAlphabets.Uppercase \nUppercase \n\n Uppercase English letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#UrlSafe","title":"KnownAlphabets.UrlSafe","content":"KnownAlphabets.UrlSafe \nUrlSafe \n\n URL-friendly numbers, English letters, and symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E.\n This is the default alphabet if one is not explicitly specified.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html","title":"NanoId","content":"NanoId \n\n Contains utilities for working with nano identifiers.\n \nNanoId.length \nlength \nNanoId.isEmpty \nisEmpty \nNanoId.ofDefaults \nofDefaults \nNanoId.ofOptions \nofOptions \nNanoId.parseAs \nparseAs \nNanoId.parseNonEmptyAs \nparseNonEmptyAs"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#length","title":"NanoId.length","content":"NanoId.length \nlength \n\n The number of characters in the given nanoId instance.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#isEmpty","title":"NanoId.isEmpty","content":"NanoId.isEmpty \nisEmpty \n\n Returns true, when the given nanoId is zero-valued; otherwise, false.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#ofDefaults","title":"NanoId.ofDefaults","content":"NanoId.ofDefaults \nofDefaults \n\n Creates a new instance using the default alphabet and size\n (nb: the default alphabet is URL-friendly numbers, English letters, and\n symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E and the default size is 21).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#ofOptions","title":"NanoId.ofOptions","content":"NanoId.ofOptions \nofOptions \n\n Creates a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E instance\n of the given size whose letters are taken from the given alphabet.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#parseAs","title":"NanoId.parseAs","content":"NanoId.parseAs \nparseAs \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the given alphabet to guide validation.\n  \n\n If the given value is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists only\n of whitespace), parsing will succeed (ie: return \u003Ccode\u003ESome nanoId\u003C/code\u003E).\n However, the resulting \u003Ccode\u003ENanoId\u003C/code\u003E instance will be\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty\u0022\u003ENanoId.Empty\u003C/a\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#parseNonEmptyAs","title":"NanoId.parseNonEmptyAs","content":"NanoId.parseNonEmptyAs \nparseNonEmptyAs \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the given alphabet to guide validation.\n  \n\n Parsing will \u0022fail\u0022 (ie: return \u003Ccode\u003ENone\u003C/code\u003E) if the given value is empty\n (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists only of whitespace).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html","title":"Alphabet","content":"Alphabet \n\n Represents a validated set of \u0027letters\u0027 from which an identifier is made\n (for details, see \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#Validate\u0022\u003EAlphabet.Validate\u003C/a\u003E).\n  \nAlphabet.MakeNanoId \nMakeNanoId \nAlphabet.ParseNanoId \nParseNanoId \nAlphabet.ParseNonEmptyNanoId \nParseNonEmptyNanoId \nAlphabet.Letters \nLetters \nAlphabet.Validate \nValidate"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#MakeNanoId","title":"Alphabet.MakeNanoId","content":"Alphabet.MakeNanoId \nMakeNanoId \n\n Creates a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E instance\n of the given size whose letters are taken from the current alphabet.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#ParseNanoId","title":"Alphabet.ParseNanoId","content":"Alphabet.ParseNanoId \nParseNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to succeed\n (ie: the method will return \u003Ccode\u003ESome NanoId.Empty\u003C/code\u003E). This mirrors\n the behavior of \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#MakeNanoId\u0022\u003EAlphabet.MakeNanoId\u003C/a\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#ParseNonEmptyNanoId","title":"Alphabet.ParseNonEmptyNanoId","content":"Alphabet.ParseNonEmptyNanoId \nParseNonEmptyNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to fail\n (ie: the method will return \u003Ccode\u003ENone\u003C/code\u003E).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#Letters","title":"Alphabet.Letters","content":"Alphabet.Letters \nLetters \n\n The validated letter set in this instance.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#Validate","title":"Alphabet.Validate","content":"Alphabet.Validate \nValidate \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html","title":"AlphabetError","content":"AlphabetError \n\n Details the potential failures which can occur when an a letter set is\n validated during \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E creation.\n  \nAlphabetError.Promote \nPromote \nAlphabetError.Message \nMessage \nAlphabetError.Letters \nLetters \nAlphabetError.AlphabetTooLarge \nAlphabetTooLarge \nAlphabetError.AlphabetTooSmall \nAlphabetTooSmall"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#Promote","title":"AlphabetError.Promote","content":"AlphabetError.Promote \nPromote \n\n Creates an \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html\u0022\u003EAlphabetException\u003C/a\u003E\n from the current \u003Ccode\u003EAlphabetError\u003C/code\u003E instance.\n The newly created exception is then raised.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#Message","title":"AlphabetError.Message","content":"AlphabetError.Message \nMessage \n\n A human-readable description of the error, suitable for printing.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#Letters","title":"AlphabetError.Letters","content":"AlphabetError.Letters \nLetters \n\n The letter set which generated the current error.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#AlphabetTooLarge","title":"AlphabetError.AlphabetTooLarge","content":"AlphabetError.AlphabetTooLarge \nAlphabetTooLarge \n\n Raised when an alphabet contains more than 255 letters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#AlphabetTooSmall","title":"AlphabetError.AlphabetTooSmall","content":"AlphabetError.AlphabetTooSmall \nAlphabetTooSmall \n\n Raised when an alphabet contains no letters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html","title":"AlphabetException","content":"AlphabetException \n\n Encapsulates data for the point-in-time failure of\n an operation involving alphabet validation.\n \nAlphabetException.Reason \nReason \nAlphabetException.Alphabet \nAlphabet"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html#Reason","title":"AlphabetException.Reason","content":"AlphabetException.Reason \nReason \n\n Further details about the actual failure.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html#Alphabet","title":"AlphabetException.Alphabet","content":"AlphabetException.Alphabet \nAlphabet \n\n The alphabet which lead to the exception.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html","title":"AlphabetExtensions","content":"AlphabetExtensions \n\n Contains utilities intended to simplify working with\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E in languages other than F#.\n  \nAlphabetExtensions.ToAlphabet \nToAlphabet \nAlphabetExtensions.ToAlphabetOrThrow \nToAlphabetOrThrow \nAlphabetExtensions.TryParseNanoId \nTryParseNanoId \nAlphabetExtensions.TryParseNonEmptyNanoId \nTryParseNonEmptyNanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#ToAlphabet","title":"AlphabetExtensions.ToAlphabet","content":"AlphabetExtensions.ToAlphabet \nToAlphabet \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#ToAlphabetOrThrow","title":"AlphabetExtensions.ToAlphabetOrThrow","content":"AlphabetExtensions.ToAlphabetOrThrow \nToAlphabetOrThrow \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#TryParseNanoId","title":"AlphabetExtensions.TryParseNanoId","content":"AlphabetExtensions.TryParseNanoId \nTryParseNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to succeed (ie: the\n method will return \u003Ccode\u003Etrue\u003C/code\u003E). However, the resulting \u003Ccode\u003ENanoId\u003C/code\u003E\n instance will be \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty\u0022\u003ENanoId.Empty\u003C/a\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#TryParseNonEmptyNanoId","title":"AlphabetExtensions.TryParseNonEmptyNanoId","content":"AlphabetExtensions.TryParseNonEmptyNanoId \nTryParseNonEmptyNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to fail (ie: the\n method will return \u003Ccode\u003Efalse\u003C/code\u003E).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html","title":"NanoId","content":"NanoId \n\n Represents a unique textual identifier, with a known length,\n based on a particular alphabet (i.e. a set of letters).\n \nNanoId.Length \nLength \nNanoId.NewId \nNewId \nNanoId.Empty \nEmpty"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Length","title":"NanoId.Length","content":"NanoId.Length \nLength \n\n The number of characters in this instance.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#NewId","title":"NanoId.NewId","content":"NanoId.NewId \nNewId \n\n Creates a new instance using the default alphabet and size\n (nb: the default alphabet is URL-friendly numbers, English letters, and\n symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E and the default size is 21).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty","title":"NanoId.Empty","content":"NanoId.Empty \nEmpty \n\n The zero-valued instance of this type.\n"},{"uri":"https://pblasucci.github.io/ananoid/index.html","title":"Ananoid\n","content":"Ananoid\n===\n\nThis library provides nano identifiers, an alternative to UUIDs (inspired by\n[https://github.com/ai/nanoid][1]).\n\n### Overview\n\nA nano identifier, or nanoid, is a randomly generated opaque value, suitable\nfor uniquely identifying database entries, file names, et cetera. Ananoid\n(pronounced: \u0022an-an-oyd\u0022) is a library for generating such identifiers.\nIt uses cryptographically secure random number generation, and has no\ndependencies beyond the dotnet 6 base class libraries. It has both a high-level\nAPI, and a simpler, more memory-efficient, low-level API.\n\n### Installation via NuGet\n\nThe latest version of this package can be installed from [NuGet][2] via the\nfollowing command:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003ECLI\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet add package pblasucci.ananoid --version 1.0.1\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### A simple example\n\nThe most common use-case for this library is to generate an new identifier,\nbased on sensible defaults (21 random characters from a URL-safe alphabet\nconsisting of: letters, numbers, underscore, and/or hyphen). A struct\nrepresenting such an identifier can be generated as follows:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nopen pblasucci.Ananoid\n\n// NOTE type annotations only for demonstration\u0027s sake\nlet nanoId : NanoId = NanoId.ofDefaults ()\n\nprintfn $\u0022nano identifier as string: %s{string nanoId}\u0022\nprintfn $\u0022nano identifier length: %i{nanoId.Length}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nImports pblasucci.Ananoid\nImports System.Console\n\n\u0027 NOTE type annotations only for demonstration\u0027s sake\nDim nanoId As NanoId = NanoId.NewId()\n\nWriteLine($\u0022nano identifier as string: {nanoId}\u0022)\nWriteLine($\u0022nano identifier length: {nanoId.Length}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nusing pblasucci.Ananoid;\nusing static System.Console;\n\n// NOTE type annotations only for demonstration\u0027s sake\nNanoId nanoId = NanoId.NewId();\n\nWriteLine($\u0022nano identifier as string: {nanoId}\u0022);\nWriteLine($\u0022nano identifier length: {nanoId.Length}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/index.fsx\n\nnano identifier as string: KJzJ41XFLlV-eh-nfxCnA\nnano identifier length: 21\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Further reading\n\n\u002B [How-To: Customize NanoId Creation][3]\n\u002B [Utilities: Complexity Calculator][4]\n\u002B [Performance: Select Highlights][5]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: https://github.com/ai/nanoid\n[2]: https://www.nuget.org/packages/pblasucci.ananoid\n[3]: ./guides/nanoidoptions.html\n[4]: ./explanations/complexity.html\n[5]: ./explanations/highlights.html\n"},{"uri":"https://pblasucci.github.io/ananoid/explanations/complexity.html","title":"Complexity Calculator","content":"---\ntitle: Complexity Calculator\ncategory: Explanations\ncategoryindex: 2\nindex: 1\n---\n\nUtilities: Complexity Calculator\n===\n\n__Coming soon!__\n\n\u002B Summary\n  \u002B inspired by: https://zelark.github.io/nano-id-cc/\n  \u002B what - determine time-to-collision based on alphabet and size of identifier\n  \u002B why - estimate strength of alphabet and size against time, space, and security\n  \u002B how - AvaloniaUI app (only tested on Linux!)\n\u002B Overview of app features\n  \u002B alphabet\n    \u002B alphabet picker\n  \u002B nano id length\n  \u002B frequency\n    \u002B hours vs seconds\n  \u002B complexity\n  \u002B generator\n\u002B Calculation\n  \u002B explain (roughly) maths\n  \u002B heavily annotated\n    \u002B F#\n    \u002B VB\n    \u002B C#\n\u002B Further Reading\n  \u002B https://en.wikipedia.org/wiki/Birthday_problem\n  \u002B https://en.wikipedia.org/wiki/Birthday_attack#Mathematics\n  \u002B https://en.wikipedia.org/wiki/Universally_unique_identifier#Collisions\n"},{"uri":"https://pblasucci.github.io/ananoid/explanations/highlights.html","title":"Performance Highlights","content":"---\ntitle: Performance Highlights\ncategory: Explanations\ncategoryindex: 2\nindex: 2\n---\n\nPerformance: Select Highlights\n===\n\n__Coming soon!__\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/nanoidoptions.html","title":"Customize NanoId Creation","content":"---\ntitle: Customize NanoId Creation\ncategory: How-To Guides\ncategoryindex: 1\nindex: 2\n---\n\nHow-To: Customize NanoId Creation\n===\n\n### Configuring generated values\n\nWhile the default settings for a \u0060NanoId\u0060 (21 random characters from a URL-safe\nalphabet consisting of: letters, numbers, underscore, or hyphen) are excellent\nfor most use cases, it remains possible to generate instances of varying sizes,\nor even generate an instance from an entirely different alphabet. Further, the\nAnanoid library ships with several [common alphabets already defined][1].\nFor example, the default behavior can be mimicked as follows:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet sameAsDefault = NanoId.ofOptions KnownAlphabets.UrlSafe 21\n\nprintfn $\u0022%s{nameof sameAsDefault}: %A{sameAsDefault}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim sameAsDefault = KnownAlphabets.UrlSafe.MakeNanoId(size:=21)\n\nWriteLine($\u0022{NameOf(sameAsDefault)}: {sameAsDefault}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nvar sameAsDefault = KnownAlphabets.UrlSafe.MakeNanoId(size: 21);\n\nWriteLine($\u0022{nameof(sameAsDefault)}: {sameAsDefault}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoidoptions.fsx\n\nsameAsDefault: Yq1CtDALLQCgP-XIBlzE6\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\nBut maybe we want a 64-character URL-safe identifier instead? Easy:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nopen KnownAlphabets\n\nlet longerId = UrlSafe |\u003E Alphabet.makeNanoId 64\n\nprintfn $\u0022%s{nameof longerId}: %A{longerId}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nImports KnownAlphabets\n\nDim longerId = UrlSafe.MakeNanoId(size:=64)\n\nWriteLine($\u0022{NameOf(longerId)}: {longerId}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nusing static KnownAlphabets;\n\nvar longerId = UrlSafe.MakeNanoId(size: 64);\n\nWriteLine($\u0022{nameof(longerId)}: {longerId}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoiddefault.fsx\n\nlongerId: xXFsRF7OGQK9dXpYZp6i88wlTU6YaVGdPWAHJTyo6SjHy-whflF7Lom0oVJerVoM\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\nOr if we wanted a 128-character value composed entirely of numbers:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet numericId = Numbers.MakeNanoId(size = 128)\n\nprintfn $\u0022%s{nameof numericId}: %A{numericId}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim numericId = Numbers.MakeNanoId(size:=128)\n\nWriteLine($\u0022{NameOf(numericId)}: {numericId}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nvar numericId = Numbers.MakeNanoId(size: 128);\n\nWriteLine($\u0022{nameof(numericId)}: {numericId}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoiddefault.fsx\n\nnumericId: 63605584488709912960741866160961621054311208530158529005938917360552694066372962792631604006204502313290707959512413672018143848\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Further Reading\n\n\u002B [Utilities: Complexity Calculator][2]\n\u002B [How-To: Define a Custom Alphabet][3]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: ../reference/pblasucci-ananoid-knownalphabets.html\n[2]: ../explanations/complexity.html\n[3]: ../guides/definecustom.html\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/installcore.html","title":"Install the Core Module from Source","content":"---\ntitle: Install the Core Module from Source\ncategory: How-To Guides\ncategoryindex: 1\nindex: 7\n---\n\nHow-To: Install the Core Module from Source\n===\n\nAnanoid can serve most uses cases via the \u0060cref:T:pblasucci.Ananoid.NanoId\u0060\ntype and its associates (\u0060cref:T:pblasucci.Ananoid.Alphabet\u0060, et cetera).\nHowever, sometimes this is not desired (or at least, not _optimal_). For times\nwhen the a struct or class is just too much, Ananoid also provides its core\nfunctionality -- cryptographically-secure randomly-generated identifiers -- as\nfunctions which take primitive inputs and just produce strings.\n\nFurther, there are some circumstances wherein it might be advantageous to only\ntake the lowest-level parts of the library as a _source-code dependency_ (the\nso-called \u0022vendorizing\u0022 of dependencies). In order to accomodate this, the\nlibrary has been carefully structured so that you may simply copy the file\n[\u0060Core.fs\u0060][1] into your project and treat these functions as just another\nmodule in your library/application/et cetera.\n\n\u003E ---\n\u003E ##Attention!!!\n\u003E\n\u003E __Unfortunately, this is only applicable for F# projects... sorry \u00AF\\\\_(\u30C4)_/\u00AF.__\n\u003E\n\u003E ---\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u003Cimg alt=\u0022project overview\u0022 src=\u0022../img/installcore.png\u0022/\u003E\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Related Reading\n\n\u002B [How-To: Work with Tagged NanoId strings][2]\n\u002B [Performance: Select Highlights][3]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: https://github.com/pblasucci/ananoid/blob/main/ananoid/Core.fs\n[2]: ../guides/taggednanoid.html\n[3]: ../explanations/highlights.html\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/nanoiddefault.html","title":"Create a Default NanoId","content":"---\ntitle: Create a Default NanoId\ncategory: How-To Guides\ncategoryindex: 1\nindex: 1\n---\n\nHow-To: Create a Default NanoId\n===\n\n### A simple example\n\nThe most common use-case for this library is to generate an new identifier,\nbased on sensible defaults (21 random characters from a URL-safe alphabet\nconsisting of: letters, numbers, underscore, or hyphen). A struct representing\nsuch an identifier can be generated as follows:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet nanoId = NanoId.ofDefaults ()\n\nprintfn $\u0022%s{nameof nanoId}, as string: %s{string nanoId}\u0022\nprintfn $\u0022%s{nameof nanoId}, length: %i{nanoId.Length}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim nanoId = NanoId.NewId()\n\nWriteLine($\u0022{NameOf(nanoId)}, as string: {nanoId.ToString()})\u0022\nWriteLine($\u0022{NameOf(nanoId)}, length: {nanoId.Length})\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nvar nanoId = NanoId.NewId();\n\nWriteLine($\u0022{nameof(nanoId)}, as string: {nanoId.ToString()})\u0022;\nWriteLine($\u0022{nameof(nanoId)}, length: {nanoId.Length})\u0022;\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoiddefault.fsx\n\nnano identifier as string: 6aWPM2MNoB_xnAt9ZCyL0\nnano identifier length: 21\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### The zeroed instance\n\n\u0060NanoId\u0060 is actually a [value type][1]. As such is has a \u0022zero\u0022 representation\n-- the empty identifier. This is a single, special instance of a \u0060NanoId\u0060 that\nhas a length of zero (0) and produces an empty string (when cast). The following\nexample shows different ways of creating and working with empty identifiers:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet zeroedId = NanoId()\n// \u2B9D\u2B9D\u2B9D Identical! \u2B9F\u2B9F\u2B9F\nlet emptyId = NanoId.Empty\n\nprintfn $\u0022%s{nameof zeroedId}, length: %i{NanoId.length zeroedId}\u0022\nprintfn $\u0022%s{nameof emptyId}, length: %i{NanoId.length emptyId}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim zeroedId As New NanoId()\n\u0027 \u2B9D\u2B9D\u2B9D Identical! \u2B9F\u2B9F\u2B9F\nDim emptyId = NanoId.Empty\n\nWriteLine($\u0022{NameOf(zeroedId)}, length: {zeroedId.Length}\u0022)\nWriteLine($\u0022{NameOf(emptyId)}, length: {emptyId.Length}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nNanoId zeroedId = new ();\n// \u2B9D\u2B9D\u2B9D Identical! \u2B9F\u2B9F\u2B9F\nvar emptyId = NanoId.Empty;\n\nWriteLine($\u0022{nameof(zeroedId)}, length: {zeroedId.Length}\u0022);\nWriteLine($\u0022{nameof(emptyId)}, length: {emptyId.Length}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoiddefault.fsx\n\nzeroedId, length: 0\nemptyId, length: 0\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Further Reading\n\n\u002B [How-To: Customize NanoId Creation][2]\n\u002B [How-To: Work with NanoId strings][3]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: https://learn.microsoft.com/en-us/dotnet/standard/base-types/common-type-system#structures\n[2]: ../guides/nanoidoptions.html\n[3]: ../guides/nanoidstring.html\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/nanoidparser.html","title":"Parse an Existing String into a NanoId","content":"---\ntitle: Parse an Existing String into a NanoId\ncategory: How-To Guides\ncategoryindex: 1\nindex: 3\n---\n\nHow-To: Parse an Existing String into a NanoId\n===\n\n### Converting existing values\n\nWhile _generating_ identifiers is the primary purpose for Ananoid, it is also\nsometimes useful to _parse_ raw strings into \u0060NanoId\u0060 instances (eg: when\nrehydrating entities from a database). To help facilitate this, Ananoid\nprovides a few utilites, each of which validates that the string in question\n_could_ have been created from a given \u0060cref:T:pblasucci.Ananoid.Alphabet\u0060\ninstance. Here, we parse a URL-safe identifier:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nopen KnownAlphabets\n\nlet nanoId = NanoId.NewId()\n\nnanoId\n|\u003E string\n|\u003E NanoId.parseAs UrlSafe\n|\u003E Option.iter (fun parsed -\u003E printfn $\u0022nanoId: %A{nanoId}, parsed: %A{parsed}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nImports KnownAlphabets\n\nDim nanoId = NanoId.NewId()\n\nDim parsed As NanoId\nIf UrlSafe.TryParse(nanoId.ToString(), Out parsed) Then\n  WriteLine($\u0022nanoId: {nanoId}, parsed: {parsed}\u0022)\nEnd If\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nopen static KnownAlphabets\n\nvar nanoId = NanoId.NewId();\n\nif (UrlSafe.TryParse(nanoId.ToString(), out var parsed))\n{\n  WriteLine($\u0022nanoId: {nanoId}, parsed: {parsed}\u0022);\n}\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoidparser.fsx\n\nnanoId: ZoCRoGew6hVWYIIimu-p4, parsed: ZoCRoGew6hVWYIIimu-p4\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\nNext, we see what happens if a raw string _cannot_ be constituted from a given\nalphabet (eg, using a purely numeric alphaber to parse a hexidecimal string):\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet nanoId = HexidecimalUppercase.MakeNanoId(size = 32)\n\nmatch Numbers.ParseNanoId(string nanoId) with\n| Some parsed -\u003E\n    printfn $\u0022nanoId: %A{nanoId}, parsed: %A{parsed}\u0022\n\n| None -\u003E\n    printfn $\u0022Failed to parse \u0027%A{nanoId}\u0027 as a numeric nano identifer!\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim nanoId = HexidecimalUppercase.MakeNanoId(size:=32)\n\nDim parsed As NanoId\nIf UrlSafe.TryParse(nanoId.ToString(), Out parsed) Then\n  WriteLine($\u0022nanoId: {nanoId}, parsed: {parsed}\u0022)\nElse\n  WriteLine($\u0022Failed to parse \u0027{nanoId}\u0027 as a numeric nano identifer!\u0022)\nEnd If\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nvar nanoId = HexidecimalUppercase.MakeNanoId(size: 32);\n\nvar message =\n  UrlSafe.TryParse(nanoId.ToString(), out var parsed)\n  ? $\u0022nanoId: {nanoId}, parsed: {parsed}\u0022\n  : $\u0022Failed to parse \u0027{nanoId}\u0027 as a numeric nano identifer!\u0022;\n\nWriteLine(message);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoidparser.fsx\n\nFailed to parse \u0027B978025EB0903089A89F40E43632587D\u0027 as a numeric nano identifer!\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\nFinally, it is worth noting: the length of the string being parsed is _not_\nvalidated. However, by default, strings which are: \u0060null\u0060, zero-lengh, or\nconsist only of whitespace will result in a parsed value of\n\u0060cref:M:pblasucci.Ananoid.NanoId.Empty\u0060.\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet didParse, parsed = NoLookalikes.TryParseNanoId String.Empty\nif didParse then\n  printfn $\u0022Is empty? %b{NanoId.isEmpty parsed}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim parsed As NanoId\nIf NoLookalikes.TryParseNanoId(String.Empty, parsed) Then\n  WriteLine($\u0022Is empty? {NanoId.Empty.Equals(parsed)}\u0022)\nEnd If\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nif (NoLookalikes.ParseNanoId(string.Empty) is { Value: var parsed })\n{\n  WriteLine($\u0022Is empty? {parsed is {Length: 0}}\u0022);\n}\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoidparser.fsx\n\nIs empty? true\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\nIf more stringent behavior is required, Ananoid provides four functions/methods\nan alternative. They are:\n\n\u002B \u0060cref:M:pblasucci.Ananoid.NanoIdModule.parseNonEmptyAs\u0060\n\u002B \u0060cref:M:pblasucci.Ananoid.AlphabetModule.parseNonEmptyNanoId\u0060\n\u002B \u0060cref:M:pblasucci.Ananoid.Alphabet.ParseNonEmptyNanoId\u0060\n\u002B \u0060cref:M:pblasucci.Ananoid.AlphabetExtensions.TryParseNonEmptyNanoId\u0060\n\nSpecifically, each of these operations will report _failure_ if the input\nprovided to them is: \u0060null\u0060, zero-length, or consist only of whitespace.\nThis may be seen in the following examples:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet parsed = null |\u003E NanoId.parseNonEmptyAs Uppercase\nprintfn $\u0022Did parse? %b{Option.isSome parsed}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim parsed As NanoId\nIf Uppercase.ParseNonEmptyNanoId(Nothing) Is Nothing Then\n  WriteLine(\u0022Did parse? false\u0022)\nEnd If\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nif (Uppercase.TryParseNonEmptyNanoId(null, out _) is false)\n{\n  WriteLine(\u0022Did parse? false\u0022);\n}\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoidparser.fsx\n\nDid parse? false\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Related Reading\n\n\u002B [How-To: Work with NanoId strings][1]\n\u002B API Reference: \u0060cref:T:pblasucci.Ananoid.KnownAlphabets\u0060\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: ../guides/nanoidstring.html\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/taggednanoid.html","title":"Work with Tagged NanoId strings","content":"---\ntitle: Work with Tagged NanoId strings\ncategory: How-To Guides\ncategoryindex: 1\nindex: 6\n---\n\nHow-To: Work with Tagged NanoId strings\n===\n\nAnanoid can serve most uses cases via the \u0060cref:T:pblasucci.Ananoid.NanoId\u0060\ntype and its associates (\u0060cref:T:pblasucci.Ananoid.Alphabet\u0060, et cetera).\nHowever, sometimes this is not desired (or at least, not _optimal_). For times\nwhen the a struct or class is just too much, Ananoid also provides its core\nfunctionality -- cryptographically-secure randomly-generated identifiers -- as\nfunctions which take simple inputs and just produce strings ([as seen here][1]).\nAnd, for F# consumers, there is one more option: tagged identifiers. This\nfeature attempts to strike a balance between the performance of raw strings and\nsafety of more robust types.\n\n\u003E ---\n\u003E ##Attention!!!\n\u003E\n\u003E __This feature is only relevant to F# consumers... sorry \u00AF\\\\_(\u30C4)_/\u00AF .__\n\u003E\n\u003E ---\n\nEffectively, instead of generating strings, the functions in the\n\u0060cref:T:pblasucci.Ananoid.Core.Tagged\u0060 module (ab)use F#\u0027s [units of measure][2]\nfunctionality to generate strings that have been \u0022tagged\u0022 with a special\nmeasure, \u0060cref:T:pblasucci.Ananoid.Core.Tagged.nanoid@measure\u0060. This causes\nthem to be typed-checked separately from ordinary string. However, as they are\nerased at run-time, they pose none of the overhead of full types (like\n\u0060cref:T:pblasucci.Ananoid.NanoId\u0060). Usage can be as simple as:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nopen pblasucci.Ananoid.Core.Tagged\n\nlet taggedDefaultId = nanoId\u0027 ()\nlet taggedNumericId = nanoIdOf\u0027 \u00220123456789\u0022 12\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EInterative Session\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E open pblasucci.Ananoid.Core.Taggd;;\n\n\u003E let taggeedDefaultId = nanoId\u0027 ();;\n    taggedDefaultId: string\u003Cnanoid\u003E = \u0022SG0vBABewIRQxruwugpTD\u0022\n\n\u003E let taggedNumericId = nanoIdOf\u0027 \u00220123456789\u0022 12;;\n    taggedNumericIdL string\u003Cnanoid\u003E = \u0022387443539896\u0022\n\u0060\u0060\u0060\n\u003C/div\u003E\n\nAnanoid further provides the \u0060tag\u0060 function for converting simple strings into\ntagged strings. For converting in the opposite direction (from a tagged string\ninto a simple string), simply use the built-in \u0060string\u0060 function. The follow\nexample helps to demonstrate the usage of \u0060tag\u0060 and \u0060string\u0060:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet simpleId = nanoId ()\nlet taggedId = nanoid.tag simpleId\n\nlet simpleId\u0027 = string taggedId\nprintfn $\u0022%s{nameof simpleId} = %s{nameof simpleId\u0027}? %b{simpleId = simpleId\u0027}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EInterative Session\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/taggednanoid.fsx\n\nsimpleId = simpleId\u0027? true\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Related Reading\n\n\u002B [Performance: Select Highlights][3]\n\u002B [How-To: Install the Core Module from Source][4]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: ../guides/nanoidstring.html\n[2]: https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/units-of-measure\n[3]: ../explanations/highlights.html\n[4]: ../guides/installcore.html\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/definecustom.html","title":"Define a Custom Alphabet","content":"---\ntitle: Define a Custom Alphabet\ncategory: How-To Guides\ncategoryindex: 1\nindex: 4\n---\n\nHow-To: Define a Custom Alphabet\n===\n\nThe default settings for creating a \u0060cref:T:pblasucci.Ananoid.NanoId\u0060\n(21 characters taken from a mix of letters, numbers, hyphen, and underscore)\nreflect a reasonable balance of entropy versus performance. Further the\nadditional alphabets shipped with Ananoid cover a wide range of common needs.\nBut it is possible to go further. Consumers can define their _own_ alphabets.\n\n### Learning about alphabets\n\nConceptually, an \u0027alphabet\u0027 is a set of \u0027letters\u0027 (technically, single-byte\ncharacters) from which a \u0060NanoId\u0060 is constituted. In practice, an\n\u0060cref:T:pblasucci.Ananoid.Alphabet\u0060 instance represents a _valildated_ set of\nletters. Specifically, an \u0060Alphabet\u0060 is safe to use for the generation and\nparsing of nano identifiers because it upholds the following invariants:\n\n\u002B The set of letters is NOT \u0060null\u0060.\n\u002B The set of letters MUST contain at least one (1) non-whitespace letter.\n\u002B The set of letters MAY NOT contains more than 255 letters.\n\nThese are not the most challenging invariants, and any set of letters which\nconforms to them can be validated as an \u0060Alphabet\u0060. For example, one could\ndefine an alphabet consisting entirely of upper case ASCII letters:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nlet uppercase = Alphabet.Validate(\u0022ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0022)\n\nprintfn $\u0022Is alphabet valid? %b{Result.isOk uppercase}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim uppercase = Alphabet.Validate(\u0022ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0022)\n\nWriteLine($\u0022Is alphabet valid? {uppercase.IsOk}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nvar uppercase = Alphabet.Validate(\u0022ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0022);\n\nWriteLine($\u0022Is alphabet valid? {uppercase.IsOk}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/definecustom.fsx\n\nIs alphabet valid? true\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Dealing with failures\n\nNot all letter sets will be valid. When validation fails, Ananoid provides the\n\u0060cref:T:pblasucci.Ananoid.AlphabetError\u0060 type, which provides details about\nwhy, exactly, a given set of letters is not valid.\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nmatch Alphabet.ofLetters String.Empty with\n| Ok valid -\u003E printfn $\u0022%s{valid.Letters} are valid.\u0022\n| Error(AlphabetTooLarge letters) -\u003E printfn \u0022Too large: \u0027%s{letters}\u0027!\u0022\n| Error(AlphabetTooSmall letters) -\u003E printfn \u0022Too small: \u0027%s{letters}\u0027!\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nDim checked = String.Empty.ToAlphabet()\n\nIf checked.IsOk Then\n  Dim alphabet = checked.ResultValue\n  WriteLine($\u0022{alphabet.Letters} are valid.\u0022)\nElse\n  Dim error = checked.ErrorValue\n  Select True\n    Case error.IsAlphabetTooLarge\n      WriteLine($\u0022Too large: \u0027{error.Letters}\u0027!\u0022)\n\n    Case error.IsAlphabetTooSmall\n      WriteLine($\u0022Too small: \u0027{error.Letters}\u0027!\u0022)\n\n    Case Else\n      Throw New UnreachableException()\n  End Select\nEnd If\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nvar @checked = String.Empty.ToAlphabet();\n\nvar message = @checked switch\n{\n  { IsOk: true, ResultValue: var alphabet } =\u003E $\u0022{alphabet.Letters} are valid.\u0022,\n\n  { ErrorValue: var error } =\u003E error switch\n  {\n    { IsAlphabetTooLarge: true } =\u003E $\u0022Too large: \u0027{error.Letters}\u0027!\u0022,\n    { IsAlphabetTooSmall: true } =\u003E $\u0022Too small: \u0027{error.Letters}\u0027!\u0022,\n\n    _ =\u003E throw new UnreachableException()\n  },\n\n  _ =\u003E throw new UnreachableException()\n};\n\nWriteLine(message);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/definecustom.fsx\n\nToo small: \u0027\u0027!\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\nHowever, sometimes, processing complex failures is uncessary (or, at least,\nundesirable). In those cases, Ananoid can raise an\n\u0060cref:T:pblasucci.Ananoid.AlphabetException\u0060, which not only surfaces an\n\u0060AlphabetError\u0060 but also halts program flow and captures a stack trace. This\nis shown in the following example:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\ntry\n  Alphabet.makeOrRaise (String.replicate 800 \u0022$\u0022)\nwith\n| :? AlphabetException as x -\u003E printfn $\u0022FAIL! %A{x.Reason}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nTry\n  Dim letters = New String(\u0022$\u0022c, 800)\n  Dim alphabet = letters.ToAlphabetOrThrow()\n  WriteLine($\u0022{alphabet.Letters} are valid.\u0022)\n\nCatch x As AlphabetException\n  WriteLine($\u0022FAIL! {x.Reason}\u0022)\n\nEnd Try\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\ntry\n{\n  var alphabet = new String(\u0027$\u0027, 300).ToAlphabetOrThrow();\n  WriteLine($\u0022{alphabet.Letters} are valid.\u0022);\n}\ncatch (AlphabetException x)\n{\n  WriteLine($\u0022FAIL! {x.Reason}\u0022);\n}\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/definecustom.fsx\n\nFAIl! AlphabetTooLarge\n  \u0022$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Related Reading\n\n\u002B [Utilities: Complexity Calculator][1]\n\u002B [How-To: Parse an Existing String into a NanoId][2]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: ../explanations/complexity.html\n[2]: ../guides/nanoidparser.html\n"},{"uri":"https://pblasucci.github.io/ananoid/guides/nanoidstring.html","title":"Work with NanoId strings","content":"---\ntitle: Work with NanoId strings\ncategory: How-To Guides\ncategoryindex: 1\nindex: 5\n---\n\nHow-To: Work with NanoId strings\n===\n\nAnanoid can serve most uses cases via the \u0060cref:T:pblasucci.Ananoid.NanoId\u0060\ntype and its associates (\u0060cref:T:pblasucci.Ananoid.Alphabet\u0060, et cetera).\nHowever, sometimes this is not desired (or at least, not _optimal_). For times\nwhen the a struct or class is just too much, Ananoid also provides its core\nfunctionality -- cryptographically-secure randomly-generated identifiers -- as\nfunctions which take simple inputs and just produce strings.\n\nThese primitive functions are located in the \u0060cref:T:pblasucci.Ananoid.Core\u0060\nmodule, and offer two variants: one based on default values, and one which\nallows customizing both alphabet and size. The following example demonstrates:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nopen pblasucci.Ananoid.Core\n\nlet defaultId = nanoId ()\n// \u2B9D\u2B9D\u2B9D These two call do the same thing. \u2B9F\u2B9F\u2B9F\nlet urlSafeId = nanoIdOf Defaults.Alphabet Defaults.Size\n\nprintfn $\u0022%s{nameof defaultId}: %s{defaultId}\u0022\nprintfn $\u0022%s{nameof urlSafeId}: %s{urlSafeId}\u0022\n\nlet alphabet, size = (\u00220123456789\u0022, 42)\nlet numericId = nanoIdOf alphabet size\n\nprintfn $\u0022%s{nameof numericId}: %s{numericId}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nImports static pblasucci.Ananoid.Core\n\nDim defaultId = NewNanoId()\n\u0027 \u2B9D\u2B9D\u2B9D These two call do the same thing. \u2B9F\u2B9F\u2B9F\nDim urlSafeId = NewNanoId(Defaults.Alphabet, Defaults.Size)\n\nWriteLine($\u0022{NameOf(defaultId)}: {defaultId}\u0022)\nWriteLine($\u0022{NameOf(urlSafeId)}: {urlSafeId}\u0022)\n\nDim numericId = NewNanoId(alphabet:=\u00220123456789\u0022, size:=42)\n\nWriteLine($\u0022{NameOf(numericId)}: {numericId}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nusing static pblasucci.Ananoid.Core\n\nval defaultId = NewNanoId();\n// \u2B9D\u2B9D\u2B9D These two call do the same thing. \u2B9F\u2B9F\u2B9F\nval urlSafeId = NewNanoId(Defaults.Alphabet, Defaults.Size);\n\nWriteLine($\u0022{nameof(defaultId)}: {defaultId}\u0022);\nWriteLine($\u0022{nameof(urlSafeId)}: {urlSafeId}\u0022);\n\nval numericId = NewNanoId(alphabet: \u00220123456789\u0022, size: 42);\n\nWriteLine($\u0022{nameof(numericId)}: {numericId}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/nanoidstring.fsx\n\ndefaultId: StsrpEEfFWnoSSUqB0IyM\nurlSafeId: Yg6PLr0_l2P6IsWgsMh3w\nnumericId: 176645656821584823660920061658558763998443\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Related Reading\n\n\u002B [Performance: Select Highlights][1]\n\u002B API Reference: \u0060cref:T:pblasucci.Ananoid.Core.Alphabets\u0060\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: ../explanations/highlights.html\n"}]