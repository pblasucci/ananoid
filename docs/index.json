[{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid.html","title":"pblasucci.Ananoid","content":"Alphabet \nCore \nKnownAlphabets \nNanoId \nAlphabet \nAlphabetError \nAlphabetException \nAlphabetExtensions \nNanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html","title":"Alphabet","content":"Alphabet \n\n Contains utilities for working with alphabets.\n \nAlphabet.ofLetters \nofLetters \nAlphabet.makeOrRaise \nmakeOrRaise \nAlphabet.makeNanoId \nmakeNanoId \nAlphabet.parseNanoId \nparseNanoId \nAlphabet.parseNonEmptyNanoId \nparseNonEmptyNanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#ofLetters","title":"Alphabet.ofLetters","content":"Alphabet.ofLetters \nofLetters \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#makeOrRaise","title":"Alphabet.makeOrRaise","content":"Alphabet.makeOrRaise \nmakeOrRaise \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#makeNanoId","title":"Alphabet.makeNanoId","content":"Alphabet.makeNanoId \nmakeNanoId \n\n Creates a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E instance\n of the given size whose letters are taken from the given alphabet.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#parseNanoId","title":"Alphabet.parseNanoId","content":"Alphabet.parseNanoId \nparseNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using a valid alphabet to guide validation.\n  \n\n If the given value is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists\n only of whitespace), parsing will succeed (ie: return \u003Ccode\u003ESome nanoId\u003C/code\u003E).\n However, the resulting \u003Ccode\u003ENanoId\u003C/code\u003E instance will be\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty\u0022\u003ENanoId.Empty\u003C/a\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetmodule.html#parseNonEmptyNanoId","title":"Alphabet.parseNonEmptyNanoId","content":"Alphabet.parseNonEmptyNanoId \nparseNonEmptyNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using a valid alphabet to guide validation.\n  \n\n Parsing will \u0022fail\u0022 (ie: return \u003Ccode\u003ENone\u003C/code\u003E) if the given value is empty\n (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists only of whitespace).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core.html","title":"Core","content":"Core \n\n Contains simple functions for generating \u0027nano identifier\u0027 strings\n (a simple alternative to things like \u0027Universal Unique Identifiers\u0027).\n  \nCore.Alphabets \nAlphabets \nCore.Defaults \nDefaults \nCore.Tagged \nTagged \nCore.nanoIdOf \nnanoIdOf \nCore.nanoId \nnanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core.html#nanoIdOf","title":"Core.nanoIdOf","content":"Core.nanoIdOf \nnanoIdOf \n\n Generates a new identifier, \u003Ccode\u003Esize\u003C/code\u003E characters in length,\n derived from the letters of the given alphabet\n (note: a size of less than one will result in an empty string).\n  \n\n When viewed from other languages, this function is named \u003Ccode\u003ENewNanoId\u003C/code\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core.html#nanoId","title":"Core.nanoId","content":"Core.nanoId \nnanoId \n\n Generates a new identifier with the default alphabet and size.\n  \n\n When viewed from other languages, this function is named \u003Ccode\u003ENewNanoId\u003C/code\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html","title":"Alphabets","content":"Alphabets \n\n Pre-defined alphabets commonly used to generate identifiers.\n \nAlphabets.Alphanumeric \nAlphanumeric \nAlphabets.HexadecimalLowercase \nHexadecimalLowercase \nAlphabets.HexadecimalUppercase \nHexadecimalUppercase \nAlphabets.Lowercase \nLowercase \nAlphabets.NoLookalikes \nNoLookalikes \nAlphabets.NoLookalikesSafe \nNoLookalikesSafe \nAlphabets.Numbers \nNumbers \nAlphabets.Uppercase \nUppercase \nAlphabets.UrlSafe \nUrlSafe"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Alphanumeric","title":"Alphabets.Alphanumeric","content":"Alphabets.Alphanumeric \nAlphanumeric \n\n from 0 to 9, not including any symbols or special characters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#HexadecimalLowercase","title":"Alphabets.HexadecimalLowercase","content":"Alphabets.HexadecimalLowercase \nHexadecimalLowercase \n\n Hexadecimal lowercase characters: 0123456789abcdef.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#HexadecimalUppercase","title":"Alphabets.HexadecimalUppercase","content":"Alphabets.HexadecimalUppercase \nHexadecimalUppercase \n\n Hexadecimal uppercase characters: 0123456789ABCDEF.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Lowercase","title":"Alphabets.Lowercase","content":"Alphabets.Lowercase \nLowercase \n\n Lowercase English letters: abcdefghijklmnopqrstuvwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#NoLookalikes","title":"Alphabets.NoLookalikes","content":"Alphabets.NoLookalikes \nNoLookalikes \n\n Numbers, Uppercase, and Lowercase without \u0022lookalikes\u0022:\n 1, l, I, 0, O, o, u, v, 5, S, s, 2, Z.\n Complete set: 346789ABCDEFGHJKLMNPQRTUVWXYabcdefghijkmnpqrtwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#NoLookalikesSafe","title":"Alphabets.NoLookalikesSafe","content":"Alphabets.NoLookalikesSafe \nNoLookalikesSafe \n\n Same as Nolookalikes -- but having removed vowels and: 3, 4, x, X, V.\n Complete set: 6789BCDFGHJKLMNPQRTWbcdfghjkmnpqrtwz\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Numbers","title":"Alphabets.Numbers","content":"Alphabets.Numbers \nNumbers \n\n Numbers from 0 to 9.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#Uppercase","title":"Alphabets.Uppercase","content":"Alphabets.Uppercase \nUppercase \n\n Uppercase English letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-alphabets.html#UrlSafe","title":"Alphabets.UrlSafe","content":"Alphabets.UrlSafe \nUrlSafe \n\n URL-friendly numbers, English letters, and symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E.\n This is the default alphabet if one is not explicitly specified.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-defaults.html","title":"Defaults","content":"Defaults \n\n Defines the recommended set of characters and output length\n for optimally generating nano identifier strings.\n \nDefaults.Alphabet \nAlphabet \nDefaults.Size \nSize"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-defaults.html#Alphabet","title":"Defaults.Alphabet","content":"Defaults.Alphabet \nAlphabet \n\n An alphabet consisting of: URL-friendly numbers, English letters, and\n symbols (ie: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E).\n This is the default alphabet if one is not explicitly specified.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-defaults.html#Size","title":"Defaults.Size","content":"Defaults.Size \nSize \n\n Twenty-one (21) single-byte characters.\n This is the default output length if one is not explicitly specified.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged.html","title":"Tagged","content":"Tagged \n\n Contains primitives for generating identifiers which are \u0022tagged\u0022\n with a discriminator (useful for managing lots of string which have\n different purposes, but where using a full CLR type is undesirable).\n  \n\u003Cb\u003EThis module is not intended for languages other than F#.\u003C/b\u003E \nTagged.nanoid \nnanoid \nTagged.string\u003C\u0027Tag\u003E \nstring\u003C\u0027Tag\u003E \nTagged.nanoIdOf\u0027 \nnanoIdOf\u0027 \nTagged.nanoId\u0027 \nnanoId\u0027"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged.html#nanoIdOf\u0027","title":"Tagged.nanoIdOf\u0027","content":"Tagged.nanoIdOf\u0027 \nnanoIdOf\u0027 \n\n Generates a new tagged identifier, \u003Ccode\u003Esize\u003C/code\u003E characters in length,\n derived from the letters of the given alphabet\n (note: a size of less than one will result in an empty string).\n  \n\u003Cb\u003EThis function is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged.html#nanoId\u0027","title":"Tagged.nanoId\u0027","content":"Tagged.nanoId\u0027 \nnanoId\u0027 \n\n Generates a new tagged identifier with the default alphabet and size.\n  \n\u003Cb\u003EThis function is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged-nanoid@measure\u0027.html","title":"nanoid","content":"nanoid \n\n A \u0022tag\u0022, which can be used as a discriminator.\n  \n\u003Cb\u003EThis tag is not intended for languages other than F#.\u003C/b\u003E \nnanoid.tag \ntag"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged-nanoid@measure\u0027.html#tag","title":"nanoid.tag","content":"nanoid.tag \ntag \n\n Applies the \u003Ccode\u003Enanoid\u003C/code\u003E \u0022tag\u0022 to a string.\n  \n\u003Cb\u003EThis function is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-core-tagged-string@measurealias\u0027.html","title":"string\u003C\u0027Tag\u003E","content":"string\u003C\u0027Tag\u003E \n\n An abbreviation for the CLI type System.String.\n  \n\u003Cb\u003EThis alias is not intended for languages other than F#.\u003C/b\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html","title":"KnownAlphabets","content":"KnownAlphabets \n\n Pre-defined alphabets commonly used to generate identifiers.\n \nKnownAlphabets.Alphanumeric \nAlphanumeric \nKnownAlphabets.HexadecimalLowercase \nHexadecimalLowercase \nKnownAlphabets.HexadecimalUppercase \nHexadecimalUppercase \nKnownAlphabets.Lowercase \nLowercase \nKnownAlphabets.NoLookalikes \nNoLookalikes \nKnownAlphabets.NoLookalikesSafe \nNoLookalikesSafe \nKnownAlphabets.Numbers \nNumbers \nKnownAlphabets.Uppercase \nUppercase \nKnownAlphabets.UrlSafe \nUrlSafe"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Alphanumeric","title":"KnownAlphabets.Alphanumeric","content":"KnownAlphabets.Alphanumeric \nAlphanumeric \n\n Combination of all the lowercase, uppercase characters and numbers\n from 0 to 9, not including any symbols or special characters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#HexadecimalLowercase","title":"KnownAlphabets.HexadecimalLowercase","content":"KnownAlphabets.HexadecimalLowercase \nHexadecimalLowercase \n\n Hexadecimal lowercase characters: 0123456789abcdef.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#HexadecimalUppercase","title":"KnownAlphabets.HexadecimalUppercase","content":"KnownAlphabets.HexadecimalUppercase \nHexadecimalUppercase \n\n Hexadecimal uppercase characters: 0123456789ABCDEF.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Lowercase","title":"KnownAlphabets.Lowercase","content":"KnownAlphabets.Lowercase \nLowercase \n\n Lowercase English letters: abcdefghijklmnopqrstuvwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#NoLookalikes","title":"KnownAlphabets.NoLookalikes","content":"KnownAlphabets.NoLookalikes \nNoLookalikes \n\n Numbers, Uppercase, and Lowercase without \u0022lookalikes\u0022:\n 1, l, I, 0, O, o, u, v, 5, S, s, 2, Z.\n Complete set: 346789ABCDEFGHJKLMNPQRTUVWXYabcdefghijkmnpqrtwxyz.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#NoLookalikesSafe","title":"KnownAlphabets.NoLookalikesSafe","content":"KnownAlphabets.NoLookalikesSafe \nNoLookalikesSafe \n\n Same as Nolookalikes -- but having removed vowels and: 3, 4, x, X, V.\n Complete set: 6789BCDFGHJKLMNPQRTWbcdfghjkmnpqrtwz\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Numbers","title":"KnownAlphabets.Numbers","content":"KnownAlphabets.Numbers \nNumbers \n\n Numbers from 0 to 9.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#Uppercase","title":"KnownAlphabets.Uppercase","content":"KnownAlphabets.Uppercase \nUppercase \n\n Uppercase English letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-knownalphabets.html#UrlSafe","title":"KnownAlphabets.UrlSafe","content":"KnownAlphabets.UrlSafe \nUrlSafe \n\n URL-friendly numbers, English letters, and symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E.\n This is the default alphabet if one is not explicitly specified.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html","title":"NanoId","content":"NanoId \n\n Contains utilities for working with nano identifiers.\n \nNanoId.length \nlength \nNanoId.isEmpty \nisEmpty \nNanoId.ofDefaults \nofDefaults \nNanoId.ofOptions \nofOptions \nNanoId.parseAs \nparseAs \nNanoId.parseNonEmptyAs \nparseNonEmptyAs"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#length","title":"NanoId.length","content":"NanoId.length \nlength \n\n The number of characters in the given nanoId instance.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#isEmpty","title":"NanoId.isEmpty","content":"NanoId.isEmpty \nisEmpty \n\n Returns true, when the given nanoId is zero-valued; otherwise, false.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#ofDefaults","title":"NanoId.ofDefaults","content":"NanoId.ofDefaults \nofDefaults \n\n Creates a new instance using the default alphabet and size\n (nb: the default alphabet is URL-friendly numbers, English letters, and\n symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E and the default size is 21).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#ofOptions","title":"NanoId.ofOptions","content":"NanoId.ofOptions \nofOptions \n\n Creates a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E instance\n of the given size whose letters are taken from the given alphabet.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#parseAs","title":"NanoId.parseAs","content":"NanoId.parseAs \nparseAs \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the given alphabet to guide validation.\n  \n\n If the given value is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists only\n of whitespace), parsing will succeed (ie: return \u003Ccode\u003ESome nanoId\u003C/code\u003E).\n However, the resulting \u003Ccode\u003ENanoId\u003C/code\u003E instance will be\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty\u0022\u003ENanoId.Empty\u003C/a\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoidmodule.html#parseNonEmptyAs","title":"NanoId.parseNonEmptyAs","content":"NanoId.parseNonEmptyAs \nparseNonEmptyAs \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the given alphabet to guide validation.\n  \n\n Parsing will \u0022fail\u0022 (ie: return \u003Ccode\u003ENone\u003C/code\u003E) if the given value is empty\n (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or consists only of whitespace).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html","title":"Alphabet","content":"Alphabet \n\n Represents a validated set of \u0027letters\u0027 from which an identifier is made\n (for details, see \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#Validate\u0022\u003EAlphabet.Validate\u003C/a\u003E).\n  \nAlphabet.MakeNanoId \nMakeNanoId \nAlphabet.ParseNanoId \nParseNanoId \nAlphabet.ParseNonEmptyNanoId \nParseNonEmptyNanoId \nAlphabet.Letters \nLetters \nAlphabet.Validate \nValidate"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#MakeNanoId","title":"Alphabet.MakeNanoId","content":"Alphabet.MakeNanoId \nMakeNanoId \n\n Creates a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E instance\n of the given size whose letters are taken from the current alphabet.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#ParseNanoId","title":"Alphabet.ParseNanoId","content":"Alphabet.ParseNanoId \nParseNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to succeed\n (ie: the method will return \u003Ccode\u003ESome NanoId.Empty\u003C/code\u003E). This mirrors\n the behavior of \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#MakeNanoId\u0022\u003EAlphabet.MakeNanoId\u003C/a\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#ParseNonEmptyNanoId","title":"Alphabet.ParseNonEmptyNanoId","content":"Alphabet.ParseNonEmptyNanoId \nParseNonEmptyNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to fail\n (ie: the method will return \u003Ccode\u003ENone\u003C/code\u003E).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#Letters","title":"Alphabet.Letters","content":"Alphabet.Letters \nLetters \n\n The validated letter set in this instance.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html#Validate","title":"Alphabet.Validate","content":"Alphabet.Validate \nValidate \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html","title":"AlphabetError","content":"AlphabetError \n\n Details the potential failures which can occur when an a letter set is\n validated during \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E creation.\n  \nAlphabetError.Promote \nPromote \nAlphabetError.Letters \nLetters \nAlphabetError.Message \nMessage \nAlphabetError.AlphabetTooLarge \nAlphabetTooLarge \nAlphabetError.AlphabetTooSmall \nAlphabetTooSmall"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#Promote","title":"AlphabetError.Promote","content":"AlphabetError.Promote \nPromote \n\n Creates an \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html\u0022\u003EAlphabetException\u003C/a\u003E\n from the current \u003Ccode\u003EAlphabetError\u003C/code\u003E instance.\n The newly created exception is then raised.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#Letters","title":"AlphabetError.Letters","content":"AlphabetError.Letters \nLetters \n\n The letter set which generated the current error.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#Message","title":"AlphabetError.Message","content":"AlphabetError.Message \nMessage \n\n A human-readable description of the error, suitable for printing.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#AlphabetTooLarge","title":"AlphabetError.AlphabetTooLarge","content":"AlphabetError.AlphabetTooLarge \nAlphabetTooLarge \n\n Raised when an alphabet contains more than 255 letters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabeterror.html#AlphabetTooSmall","title":"AlphabetError.AlphabetTooSmall","content":"AlphabetError.AlphabetTooSmall \nAlphabetTooSmall \n\n Raised when an alphabet contains no letters.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html","title":"AlphabetException","content":"AlphabetException \n\n Encapsulates data for the point-in-time failure of\n an operation involving alphabet validation.\n \nAlphabetException.Reason \nReason \nAlphabetException.Alphabet \nAlphabet"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html#Reason","title":"AlphabetException.Reason","content":"AlphabetException.Reason \nReason \n\n Further details about the actual failure.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetexception.html#Alphabet","title":"AlphabetException.Alphabet","content":"AlphabetException.Alphabet \nAlphabet \n\n The alphabet which lead to the exception.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html","title":"AlphabetExtensions","content":"AlphabetExtensions \n\n Contains utilities intended to simplify working with\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E in languages other than F#.\n  \nAlphabetExtensions.ToAlphabet \nToAlphabet \nAlphabetExtensions.ToAlphabetOrThrow \nToAlphabetOrThrow \nAlphabetExtensions.TryParseNanoId \nTryParseNanoId \nAlphabetExtensions.TryParseNonEmptyNanoId \nTryParseNonEmptyNanoId"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#ToAlphabet","title":"AlphabetExtensions.ToAlphabet","content":"AlphabetExtensions.ToAlphabet \nToAlphabet \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#ToAlphabetOrThrow","title":"AlphabetExtensions.ToAlphabetOrThrow","content":"AlphabetExtensions.ToAlphabetOrThrow \nToAlphabetOrThrow \n\n Builds a new \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabet.html\u0022\u003EAlphabet\u003C/a\u003E from\n the given letter set after checking that it upholds certain\n invariants which are necessary for the algorithm to work well.\n  \n\n An alphabet\u0027s letters MUST uphold the following invariants:\n \u003Cul\u003E\u003Cli\u003EIs not \u003Ccode\u003Enull\u003C/code\u003E\u003C/li\u003E\u003Cli\u003EContains at least one (1) non-whitespace letter\u003C/li\u003E\u003Cli\u003EContains no more then 255 letters\u003C/li\u003E\u003C/ul\u003E"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#TryParseNanoId","title":"AlphabetExtensions.TryParseNanoId","content":"AlphabetExtensions.TryParseNanoId \nTryParseNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to succeed (ie: the\n method will return \u003Ccode\u003Etrue\u003C/code\u003E). However, the resulting \u003Ccode\u003ENanoId\u003C/code\u003E\n instance will be \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty\u0022\u003ENanoId.Empty\u003C/a\u003E.\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-alphabetextensions.html#TryParseNonEmptyNanoId","title":"AlphabetExtensions.TryParseNonEmptyNanoId","content":"AlphabetExtensions.TryParseNonEmptyNanoId \nTryParseNonEmptyNanoId \n\n Attempts to convert the given \u003Ccode\u003Evalue\u003C/code\u003E into a\n \u003Ca href=\u0022https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html\u0022\u003ENanoId\u003C/a\u003E,\n using the current alphabet to guide validation.\n  \n\n If the input \u003Ccode\u003Evalue\u003C/code\u003E is empty (ie: \u003Ccode\u003Enull\u003C/code\u003E, zero-length, or\n consists only of whitespace), parsing is considered to fail (ie: the\n method will return \u003Ccode\u003Efalse\u003C/code\u003E).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html","title":"NanoId","content":"NanoId \n\n Represents a unique textual identifier, with a known length,\n based on a particular alphabet (i.e. a set of letters).\n \nNanoId.Length \nLength \nNanoId.NewId \nNewId \nNanoId.Empty \nEmpty"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Length","title":"NanoId.Length","content":"NanoId.Length \nLength \n\n The number of characters in this instance.\n"},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#NewId","title":"NanoId.NewId","content":"NanoId.NewId \nNewId \n\n Creates a new instance using the default alphabet and size\n (nb: the default alphabet is URL-friendly numbers, English letters, and\n symbols: \u003Ccode\u003EA-Za-z0-9_-\u003C/code\u003E and the default size is 21).\n "},{"uri":"https://pblasucci.github.io/ananoid/reference/pblasucci-ananoid-nanoid.html#Empty","title":"NanoId.Empty","content":"NanoId.Empty \nEmpty \n\n The zero-valued instance of this type.\n"},{"uri":"https://pblasucci.github.io/ananoid/index.html","title":"Ananoid\n","content":"Ananoid\n===\n\nThis library provides nano identifiers, an alternative to UUIDs (inspired by\n[https://github.com/ai/nanoid][1]).\n\n### Overview\n\nA nano identifier, or nanoid, is a randomly generated opaque value, suitable\nfor uniquely identifying database entries, file names, et cetera. Ananoid\n(pronounced: \u0022an-an-oyd\u0022) is a library for generating such identifiers.\nIt uses cryptographically secure random number generation, and has no\ndependencies beyond the dotnet 6 base class libraries. It has both a high-level\nAPI, and a simpler, more memory-efficient, low-level API.\n\n### Installation via NuGet\n\nThe latest version of this package can be installed from [NuGet][2] via the\nfollowing command:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003ECLI\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet add package pblasucci.ananoid --version 1.1.1\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### A simple example\n\nThe most common use-case for this library is to generate an new identifier,\nbased on sensible defaults (21 random characters from a URL-safe alphabet\nconsisting of: letters, numbers, underscore, and/or hyphen). A struct\nrepresenting such an identifier can be generated as follows:\n\n\u003Cdiv class=\u0022lang-bar\u0022\u003E\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EF#\u003C/summary\u003E\n\n\u0060\u0060\u0060fsharp\nopen pblasucci.Ananoid\n\n// NOTE type annotations only for demonstration\u0027s sake\nlet nanoId : NanoId = NanoId.ofDefaults ()\n\nprintfn $\u0022nano identifier as string: %s{string nanoId}\u0022\nprintfn $\u0022nano identifier length: %i{nanoId.Length}\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EVB\u003C/summary\u003E\n\n\u0060\u0060\u0060vb\nImports pblasucci.Ananoid\nImports System.Console\n\n\u0027 NOTE type annotations only for demonstration\u0027s sake\nDim nanoId As NanoId = NanoId.NewId()\n\nWriteLine($\u0022nano identifier as string: {nanoId}\u0022)\nWriteLine($\u0022nano identifier length: {nanoId.Length}\u0022)\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block\u0022\u003E\n\u003Csummary\u003EC#\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\nusing pblasucci.Ananoid;\nusing static System.Console;\n\n// NOTE type annotations only for demonstration\u0027s sake\nNanoId nanoId = NanoId.NewId();\n\nWriteLine($\u0022nano identifier as string: {nanoId}\u0022);\nWriteLine($\u0022nano identifier length: {nanoId.Length}\u0022);\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\u003Cdetails open class=\u0022lang-block console\u0022\u003E\n\u003Csummary\u003EOUT\u003C/summary\u003E\n\n\u0060\u0060\u0060sh\n\u003E dotnet fsi ~/scratches/index.fsx\n\nnano identifier as string: KJzJ41XFLlV-eh-nfxCnA\nnano identifier length: 21\n\u0060\u0060\u0060\n\u003C/details\u003E\n\u003C/div\u003E\n\n### Further reading\n\n\u002B [How-To: Customize NanoId Creation][3]\n\u002B [Utilities: Complexity Calculator][4]\n\u002B [Performance: Select Highlights][5]\n\n### Copyright\nThe library is available under the Mozilla Public License, Version 2.0.\nFor more information see the project\u0027s [License][0] file.\n\n\n[0]: https://github.com/pblasucci/ananoid/blob/main/LICENSE.txt\n[1]: https://github.com/ai/nanoid\n[2]: https://www.nuget.org/packages/pblasucci.ananoid\n[3]: ./guides/nanoidoptions.html\n[4]: ./explanations/complexity.html\n[5]: ./explanations/highlights.html\n"}]